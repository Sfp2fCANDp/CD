/* The following code was generated by JFlex 1.3.5 on 22.05.2002 16:00 */

/* UserCode section */

/* Imported packages */
import java.util.*;
import java_cup.runtime.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.3.5
 * on 22.05.2002 16:00 from the specification file
 * <tt>file:/C:/Parser/Src/CSharpLexer.flex</tt>
 */
public class CSharpLexer implements sym, java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  final public static int YYEOF = -1;

  /** initial size of the lookahead buffer */
  final private static int YY_BUFFERSIZE = 16384;

  /** lexical states */
  final public static int STATE_CHAR = 2;
  final public static int YYINITIAL = 0;
  final public static int STATE_STRING = 1;
  final public static int COMMENT = 3;

  /** 
   * Translates characters to character classes
   */
  final private static String yycmap_packed = 
    "\11\11\1\4\1\2\1\0\1\4\1\1\16\11\4\0\1\4\1\77"+
    "\1\25\1\0\1\7\1\73\1\74\1\26\1\65\1\66\1\31\1\72"+
    "\1\67\1\22\1\20\1\5\1\15\11\12\1\70\1\71\1\103\1\102"+
    "\1\104\1\100\1\6\3\17\1\24\1\21\1\24\5\7\1\14\1\23"+
    "\7\7\1\13\2\7\1\16\2\7\1\63\1\27\1\64\1\76\1\7"+
    "\1\0\1\32\1\33\1\37\1\40\1\41\1\52\1\53\1\47\1\51"+
    "\1\57\1\46\1\43\1\42\1\50\1\45\1\55\1\7\1\36\1\34"+
    "\1\35\1\30\1\10\1\56\1\54\1\44\1\60\1\61\1\75\1\62"+
    "\1\101\41\11\2\0\4\7\4\0\1\7\12\0\1\7\4\0\1\7"+
    "\5\0\27\7\1\0\37\7\1\0\376\7\4\0\36\7\70\0\131\7"+
    "\7\0\11\7\2\0\7\7\16\0\2\7\16\0\5\7\33\0\106\11"+
    "\32\0\2\11\30\0\1\7\13\0\1\7\1\0\3\7\1\0\1\7"+
    "\1\0\24\7\1\0\54\7\1\0\7\7\3\0\1\7\1\0\1\7"+
    "\1\0\1\7\1\0\1\7\1\0\22\7\15\0\14\7\1\0\102\7"+
    "\1\0\14\7\1\0\44\7\1\0\4\11\11\0\65\7\2\0\2\7"+
    "\2\0\2\7\3\0\34\7\2\0\10\7\2\0\2\7\67\0\46\7"+
    "\2\0\1\7\7\0\47\7\11\0\21\11\1\0\27\11\1\0\3\11"+
    "\1\0\1\11\1\0\2\11\1\0\1\11\13\0\33\7\5\0\3\7"+
    "\56\0\32\7\5\0\13\7\10\11\15\0\12\11\6\0\1\11\107\7"+
    "\2\0\5\7\1\0\17\7\1\0\4\7\1\0\1\7\7\11\2\0"+
    "\6\11\2\7\2\11\1\0\4\11\2\0\12\11\u0207\0\3\11\1\0"+
    "\65\7\2\0\1\11\1\7\20\11\3\0\4\11\3\0\12\7\2\11"+
    "\2\0\12\11\21\0\3\11\1\0\10\7\2\0\2\7\2\0\26\7"+
    "\1\0\7\7\1\0\1\7\3\0\4\7\2\0\1\11\1\0\7\11"+
    "\2\0\2\11\2\0\3\11\11\0\1\11\4\0\2\7\1\0\3\7"+
    "\2\11\2\0\12\11\4\7\16\0\1\11\2\0\6\7\4\0\2\7"+
    "\2\0\26\7\1\0\7\7\1\0\2\7\1\0\2\7\1\0\2\7"+
    "\2\0\1\11\1\0\5\11\4\0\2\11\2\0\3\11\13\0\4\7"+
    "\1\0\1\7\7\0\14\11\3\7\14\0\3\11\1\0\7\7\1\0"+
    "\1\7\1\0\3\7\1\0\26\7\1\0\7\7\1\0\2\7\1\0"+
    "\5\7\2\0\1\11\1\7\10\11\1\0\3\11\1\0\3\11\22\0"+
    "\1\7\5\0\12\11\21\0\3\11\1\0\10\7\2\0\2\7\2\0"+
    "\26\7\1\0\7\7\1\0\2\7\2\0\4\7\2\0\1\11\1\7"+
    "\6\11\3\0\2\11\2\0\3\11\10\0\2\11\4\0\2\7\1\0"+
    "\3\7\4\0\12\11\22\0\2\11\1\0\6\7\3\0\3\7\1\0"+
    "\4\7\3\0\2\7\1\0\1\7\1\0\2\7\3\0\2\7\3\0"+
    "\3\7\3\0\10\7\1\0\3\7\4\0\5\11\3\0\3\11\1\0"+
    "\4\11\11\0\1\11\17\0\11\11\21\0\3\11\1\0\10\7\1\0"+
    "\3\7\1\0\27\7\1\0\12\7\1\0\5\7\4\0\7\11\1\0"+
    "\3\11\1\0\4\11\7\0\2\11\11\0\2\7\4\0\12\11\22\0"+
    "\2\11\1\0\10\7\1\0\3\7\1\0\27\7\1\0\12\7\1\0"+
    "\5\7\4\0\7\11\1\0\3\11\1\0\4\11\7\0\2\11\7\0"+
    "\1\7\1\0\2\7\4\0\12\11\22\0\2\11\1\0\10\7\1\0"+
    "\3\7\1\0\27\7\1\0\20\7\4\0\6\11\2\0\3\11\1\0"+
    "\4\11\11\0\1\11\10\0\2\7\4\0\12\11\221\0\56\7\1\0"+
    "\1\7\1\11\2\7\7\11\4\0\10\7\10\11\1\0\12\11\47\0"+
    "\2\7\1\0\1\7\2\0\2\7\1\0\1\7\2\0\1\7\6\0"+
    "\4\7\1\0\7\7\1\0\3\7\1\0\1\7\1\0\1\7\2\0"+
    "\2\7\1\0\2\7\1\0\1\7\1\11\2\7\6\11\1\0\2\11"+
    "\1\7\2\0\5\7\1\0\1\7\1\0\6\11\2\0\12\11\2\0"+
    "\2\7\72\0\2\11\6\0\12\11\13\0\1\11\1\0\1\11\1\0"+
    "\1\11\4\0\2\11\10\7\1\0\41\7\7\0\24\11\1\0\6\11"+
    "\4\0\6\11\1\0\1\11\1\0\25\11\3\0\7\11\1\0\1\11"+
    "\346\0\46\7\12\0\47\7\11\0\132\7\5\0\104\7\5\0\122\7"+
    "\u0c06\0\234\7\4\0\132\7\6\0\26\7\2\0\6\7\2\0\46\7"+
    "\2\0\6\7\2\0\10\7\1\0\1\7\1\0\1\7\1\0\1\7"+
    "\1\0\37\7\2\0\65\7\1\0\7\7\1\0\1\7\3\0\3\7"+
    "\1\0\7\7\3\0\4\7\2\0\6\7\4\0\15\7\5\0\3\7"+
    "\1\0\7\7\17\0\4\11\30\0\1\3\1\3\5\11\20\0\2\7"+
    "\51\0\6\11\17\0\1\7\40\0\15\7\43\0\15\11\4\0\1\11"+
    "\40\0\1\7\4\0\1\7\2\0\12\7\1\0\1\7\2\0\6\7"+
    "\6\0\1\7\1\0\1\7\1\0\1\7\1\0\10\7\1\0\6\7"+
    "\47\0\43\7\u0e82\0\1\7\1\0\1\7\31\0\11\7\6\11\1\0"+
    "\5\7\13\0\124\7\4\0\2\11\4\7\2\0\132\7\1\0\3\7"+
    "\6\0\50\7\4\0\136\7\u1c71\0\u51a6\7\u0c5a\0\u2ba4\7\u215c\0\u012e\7"+
    "\322\0\7\7\14\0\5\7\6\0\1\11\12\7\1\0\15\7\1\0"+
    "\5\7\1\0\1\7\1\0\2\7\1\0\2\7\1\0\154\7\41\0"+
    "\u016b\7\22\0\100\7\2\0\66\7\50\0\14\7\44\0\4\11\17\0"+
    "\2\7\30\0\3\7\31\0\1\7\6\0\3\7\1\0\1\7\1\0"+
    "\207\7\2\0\1\11\4\0\1\7\13\0\12\11\7\0\32\7\4\0"+
    "\1\7\1\0\32\7\13\0\131\7\3\0\6\7\2\0\6\7\2\0"+
    "\6\7\2\0\3\7\3\0\2\7\3\0\2\7\31\0";

  /** 
   * Translates characters to character classes
   */
  final private static char [] yycmap = yy_unpack_cmap(yycmap_packed);

  /** 
   * Translates a state to a row index in the transition table
   */
  final private static int yy_rowMap [] = { 
        0,    69,   138,   207,   276,   345,   276,   414,   483,   552, 
      621,   690,   759,   828,   276,   276,   897,   966,  1035,  1104, 
     1173,  1242,  1311,  1380,  1449,  1518,  1587,  1656,  1725,  1794, 
     1863,  1932,  2001,  2070,  2139,   276,   276,   276,   276,   276, 
      276,   276,   276,   276,  2208,  2277,  2346,  2415,  2484,  2553, 
      276,   276,  2622,  2691,  2760,  2829,  2898,   276,   276,  2967, 
     3036,  3105,   276,  3174,  3243,  3312,  3381,   276,   276,  3450, 
     3519,  3588,   276,   759,  3657,   276,  3726,  3795,   276,   276, 
      276,  3864,  3933,  4002,  4071,   276,  4140,  4209,  4278,  4347, 
     4416,  4485,  4554,  4623,  4692,  4761,  4830,  4899,  4968,  5037, 
     5106,  5175,  5244,  5313,  5382,  5451,  5520,  5589,  5658,  5727, 
     5796,  5865,  5934,  6003,  6072,  6141,  6210,  6279,  6348,  6417, 
     6486,  6555,  6624,   483,  6693,  6762,   483,  6831,  6900,  6969, 
     7038,  7107,  7176,  7245,  7314,  7383,  7452,   276,   276,   276, 
      276,   276,   276,   276,   276,   276,   276,   276,  7521,   276, 
     7590,   276,   276,  7659,   276,   276,   276,   276,  7728,   276, 
      276,   276,   276,   276,   276,  7797,   276,  7866,  7935,  8004, 
     8073,  8142,  8211,  8280,  8349,  8418,  8487,  8556,  8625,  8694, 
     8763,   276,   276,  8832,  3243,  8901,  8970,  9039,  9108,  9177, 
     3726,  9246,  9315,  9384,  9453,  9522,  9591,  9660,  9729,   483, 
     9798,  9867,  9936, 10005, 10074, 10143, 10212, 10281,   483, 10350, 
    10419, 10488, 10557,   483, 10626, 10695, 10764, 10833, 10902, 10971, 
      483, 11040, 11109, 11178, 11247, 11316, 11385, 11454, 11523, 11592, 
    11661, 11730, 11799, 11868, 11937, 12006, 12075, 12144, 12213, 12282, 
    12351,   483, 12420, 12489, 12558, 12627,   483, 12696, 12765, 12834, 
    12903, 12972, 13041, 13110, 13179,   483, 13248, 13317, 13386, 13455, 
    13524, 13593,   276,   276, 13662, 13731, 13800,   276, 13869,   276, 
      276,   276,   276, 13938,   276,   276,   276,   276,   276,   276, 
    14007, 14076,   483, 14145, 14214, 14283, 14352, 14421, 14490,   483, 
    14559, 14628,   483, 14697,   483,   483, 14766, 14835, 14904, 14973, 
    15042, 15111, 15180, 15249, 15318,   483, 15387, 15456,   483, 15525, 
    15594, 15663,   483, 15732, 15801, 15870, 15939,   483, 16008, 16077, 
    16146, 16215, 16284, 16353,   483,   483, 16422, 16491, 16560, 16629, 
      483,   483, 16698, 16767, 16836,   483, 16905, 16974, 17043, 17112, 
    17181, 17250, 17319, 17388, 17457,   483, 17526, 17595, 17664, 17733, 
    17802, 17871, 17940, 18009, 18078, 18147, 18216, 18285,   276, 18354, 
    18423, 18492,   483,   483, 18561, 18630, 18699, 18768,   483,   483, 
    18837, 18906, 18975, 19044, 19113,   483, 19182, 19251, 19320,   483, 
    19389, 19458, 19527,   483,   483,   483, 19596, 19665, 19734, 19803, 
    19872, 19941,   483, 20010, 20079, 20148, 20217, 20286, 20355, 20424, 
    20493, 20562, 20631,   483,   483, 20700,   483, 20769,   483, 20838, 
    20907, 20976, 21045, 21114,   483, 21183, 21252, 21321, 21390, 21459, 
    21528, 21597, 21666,   483,   483, 21735, 21804, 21873,   483, 21942, 
      483,   483,   483,   483,   483,   483, 22011,   483,   483, 22080, 
    22149, 22218, 22287, 22356,   483,   483, 22425,   483,   483, 22494, 
      483, 22563, 22632, 22701, 22770, 22839, 22908, 22977,   483,   483, 
    23046, 23115, 23184,  7728,   276,   276,  8280, 23253, 23322, 23391, 
      483, 23460, 23529, 23598, 23667, 23736, 23805,   483,   483, 23874, 
      483, 23943, 24012, 24081, 24150, 24219, 24288, 24357,   483,   483, 
    24426, 24495,   483,   276,   483, 24564,   483,   483, 24633,   483, 
      483,   483,   483,   483,   483, 24702,   483,   483, 24771, 24840, 
      483,   483, 24909,   483,   483,   483,   483
  };

  /** 
   * The packed transition table of the DFA (part 0)
   */
  final private static String yy_packed0 = 
    "\1\5\1\6\3\7\1\10\2\11\1\12\1\5\1\13"+
    "\2\11\1\14\2\11\1\15\1\11\1\16\2\11\1\17"+
    "\1\20\1\5\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\11\1\35"+
    "\2\11\1\36\1\37\1\40\1\41\1\11\1\42\1\43"+
    "\2\11\1\44\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62"+
    "\1\63\1\64\1\65\1\66\1\67\1\70\1\71\2\72"+
    "\21\70\1\73\1\70\1\74\55\70\1\75\1\76\2\77"+
    "\22\75\1\5\1\100\55\75\1\7\1\101\27\7\1\102"+
    "\53\7\107\0\1\7\107\0\1\103\23\0\1\104\50\0"+
    "\1\105\11\0\11\11\1\0\1\11\1\0\2\11\3\0"+
    "\1\11\1\0\27\11\33\0\11\11\1\0\1\11\1\0"+
    "\2\11\3\0\1\11\1\0\13\11\1\106\3\11\1\107"+
    "\7\11\36\0\1\13\1\110\1\111\1\13\2\0\1\112"+
    "\1\113\1\0\2\114\3\0\1\110\7\0\1\114\1\113"+
    "\1\114\1\111\6\0\1\114\44\0\1\13\1\110\1\111"+
    "\1\13\1\115\1\0\1\112\1\113\1\0\2\114\3\0"+
    "\1\110\7\0\1\114\1\113\1\114\1\111\6\0\1\114"+
    "\1\0\1\115\42\0\1\116\2\0\1\116\111\0\1\117"+
    "\57\0\1\120\1\0\1\121\7\0\11\11\1\0\1\11"+
    "\1\0\2\11\3\0\1\11\1\0\2\11\1\122\6\11"+
    "\1\123\4\11\1\124\1\125\7\11\126\0\1\126\11\0"+
    "\11\11\1\0\1\11\1\0\2\11\3\0\1\11\1\0"+
    "\1\11\1\127\1\130\3\11\1\131\20\11\33\0\11\11"+
    "\1\0\1\11\1\0\2\11\3\0\1\11\1\0\1\132"+
    "\3\11\1\133\5\11\1\134\1\135\13\11\33\0\11\11"+
    "\1\0\1\11\1\0\2\11\3\0\1\11\1\0\1\11"+
    "\1\136\1\11\1\137\3\11\1\140\5\11\1\141\1\11"+
    "\1\142\4\11\1\143\2\11\33\0\11\11\1\0\1\11"+
    "\1\0\2\11\3\0\1\11\1\0\4\11\1\144\5\11"+
    "\1\145\2\11\1\146\11\11\33\0\11\11\1\0\1\11"+
    "\1\0\2\11\3\0\1\11\1\0\7\11\1\147\17\11"+
    "\33\0\11\11\1\0\1\11\1\0\2\11\3\0\1\11"+
    "\1\0\1\150\10\11\1\151\1\11\1\152\1\11\1\153"+
    "\11\11\33\0\11\11\1\0\1\11\1\0\2\11\3\0"+
    "\1\11\1\0\7\11\1\154\3\11\1\155\13\11\33\0"+
    "\1\11\1\156\7\11\1\0\1\11\1\0\2\11\3\0"+
    "\1\11\1\0\11\11\1\157\4\11\1\160\3\11\1\161"+
    "\4\11\33\0\11\11\1\0\1\11\1\0\2\11\3\0"+
    "\1\11\1\0\7\11\1\162\3\11\1\163\13\11\33\0"+
    "\11\11\1\0\1\11\1\0\2\11\3\0\1\11\1\0"+
    "\13\11\1\164\13\11\33\0\1\11\1\165\7\11\1\0"+
    "\1\11\1\0\2\11\3\0\1\166\1\0\1\11\1\167"+
    "\21\11\1\170\3\11\33\0\11\11\1\0\1\11\1\0"+
    "\2\11\3\0\1\171\1\0\1\172\6\11\1\173\17\11"+
    "\33\0\11\11\1\0\1\11\1\0\2\11\3\0\1\11"+
    "\1\0\2\11\1\174\5\11\1\175\5\11\1\176\1\11"+
    "\1\177\6\11\33\0\11\11\1\0\1\11\1\0\2\11"+
    "\3\0\1\11\1\0\1\200\10\11\1\201\1\11\1\202"+
    "\3\11\1\203\7\11\33\0\11\11\1\0\1\11\1\0"+
    "\2\11\3\0\1\11\1\0\7\11\1\204\3\11\1\205"+
    "\13\11\33\0\11\11\1\0\1\11\1\0\2\11\3\0"+
    "\1\206\1\0\1\207\3\11\1\210\22\11\33\0\11\11"+
    "\1\0\1\11\1\0\2\11\3\0\1\11\1\0\15\11"+
    "\1\211\11\11\116\0\1\212\7\0\1\213\104\0\1\214"+
    "\76\0\1\215\5\0\1\216\77\0\1\217\4\0\1\220"+
    "\104\0\1\221\104\0\1\222\104\0\1\223\104\0\1\224"+
    "\1\225\103\0\1\226\1\0\1\227\1\70\3\0\21\70"+
    "\1\0\1\70\1\0\55\70\2\0\1\72\102\0\2\230"+
    "\1\0\5\230\1\231\2\230\1\232\1\230\1\233\7\230"+
    "\1\234\1\235\1\236\1\237\1\230\1\240\1\241\1\230"+
    "\1\242\1\243\11\230\1\244\1\230\1\245\1\230\1\246"+
    "\30\230\26\0\1\247\60\0\1\77\102\0\2\230\1\0"+
    "\5\230\1\250\2\230\1\251\1\230\1\252\7\230\1\253"+
    "\1\254\1\255\1\256\1\230\1\257\1\260\1\230\1\261"+
    "\1\262\11\230\1\263\1\230\1\264\1\230\1\265\30\230"+
    "\2\0\1\266\107\0\1\267\23\0\1\270\53\0\1\103"+
    "\1\271\2\266\101\103\7\0\11\11\1\0\1\11\1\0"+
    "\2\11\3\0\1\11\1\0\11\11\1\272\5\11\1\273"+
    "\7\11\33\0\11\11\1\0\1\11\1\0\2\11\3\0"+
    "\1\11\1\0\4\11\1\274\22\11\40\0\1\111\26\0"+
    "\1\111\53\0\1\275\2\0\1\275\4\0\1\276\47\0"+
    "\1\276\24\0\1\277\2\0\1\277\1\0\1\277\1\0"+
    "\1\277\2\0\1\277\5\0\2\277\3\0\3\277\10\0"+
    "\1\277\44\0\1\116\2\0\1\116\3\0\1\113\1\0"+
    "\2\114\13\0\1\114\1\113\1\114\7\0\1\114\41\0"+
    "\11\11\1\0\1\11\1\0\2\11\3\0\1\11\1\0"+
    "\15\11\1\300\1\11\1\301\7\11\33\0\11\11\1\0"+
    "\1\11\1\0\2\11\3\0\1\11\1\0\13\11\1\302"+
    "\13\11\33\0\11\11\1\0\1\11\1\0\2\11\3\0"+
    "\1\11\1\0\2\11\1\303\2\11\1\304\21\11\33\0"+
    "\11\11\1\0\1\11\1\0\2\11\3\0\1\11\1\0"+
    "\16\11\1\305\10\11\33\0\11\11\1\0\1\11\1\0"+
    "\2\11\3\0\1\11\1\0\2\11\1\306\24\11\33\0"+
    "\11\11\1\0\1\11\1\0\2\11\3\0\1\11\1\0"+
    "\2\11\1\307\24\11\33\0\11\11\1\0\1\11\1\0"+
    "\2\11\3\0\1\11\1\0\6\11\1\310\20\11\33\0"+
    "\11\11\1\0\1\11\1\0\2\11\3\0\1\11\1\0"+
    "\2\11\1\311\24\11\33\0\11\11\1\0\1\11\1\0"+
    "\2\11\3\0\1\11\1\0\7\11\1\312\17\11\33\0"+
    "\11\11\1\0\1\11\1\0\2\11\3\0\1\11\1\0"+
    "\3\11\1\313\23\11\33\0\11\11\1\0\1\11\1\0"+
    "\2\11\3\0\1\11\1\0\13\11\1\314\13\11\33\0"+
    "\11\11\1\0\1\11\1\0\2\11\3\0\1\11\1\0"+
    "\12\11\1\315\14\11\33\0\11\11\1\0\1\11\1\0"+
    "\2\11\3\0\1\11\1\0\1\316\3\11\1\317\22\11"+
    "\33\0\11\11\1\0\1\11\1\0\2\11\3\0\1\11"+
    "\1\0\1\320\2\11\1\321\23\11\33\0\11\11\1\0"+
    "\1\11\1\0\2\11\3\0\1\11\1\0\13\11\1\322"+
    "\13\11\33\0\11\11\1\0\1\11\1\0\2\11\3\0"+
    "\1\11\1\0\26\11\1\323\33\0\11\11\1\0\1\11"+
    "\1\0\2\11\3\0\1\11\1\0\17\11\1\324\7\11"+
    "\33\0\11\11\1\0\1\11\1\0\2\11\3\0\1\325"+
    "\1\0\12\11\1\326\14\11\33\0\11\11\1\0\1\11"+
    "\1\0\2\11\3\0\1\11\1\0\23\11\1\327\3\11"+
    "\33\0\11\11\1\0\1\11\1\0\2\11\3\0\1\11"+
    "\1\0\4\11\1\330\12\11\1\331\7\11\33\0\11\11"+
    "\1\0\1\11\1\0\2\11\3\0\1\11\1\0\1\332"+
    "\2\11\1\333\4\11\1\334\7\11\1\335\6\11\33\0"+
    "\11\11\1\0\1\11\1\0\2\11\3\0\1\11\1\0"+
    "\2\11\1\336\1\337\23\11\33\0\11\11\1\0\1\11"+
    "\1\0\2\11\3\0\1\11\1\0\1\340\26\11\33\0"+
    "\11\11\1\0\1\11\1\0\2\11\3\0\1\11\1\0"+
    "\16\11\1\341\10\11\33\0\11\11\1\0\1\11\1\0"+
    "\2\11\3\0\1\11\1\0\1\342\6\11\1\343\17\11"+
    "\33\0\11\11\1\0\1\11\1\0\2\11\3\0\1\11"+
    "\1\0\5\11\1\344\3\11\1\345\6\11\1\346\6\11"+
    "\33\0\11\11\1\0\1\11\1\0\2\11\3\0\1\347"+
    "\1\0\27\11\33\0\11\11\1\0\1\11\1\0\2\11"+
    "\3\0\1\11\1\0\7\11\1\350\17\11\33\0\11\11"+
    "\1\0\1\11\1\0\2\11\3\0\1\11\1\0\2\11"+
    "\1\351\24\11\33\0\11\11\1\0\1\11\1\0\2\11"+
    "\3\0\1\352\1\0\27\11\33\0\11\11\1\0\1\11"+
    "\1\0\2\11\3\0\1\11\1\0\3\11\1\353\17\11"+
    "\1\354\3\11\33\0\11\11\1\0\1\11\1\0\2\11"+
    "\3\0\1\11\1\0\3\11\1\355\23\11\33\0\11\11"+
    "\1\0\1\11\1\0\2\11\3\0\1\11\1\0\6\11"+
    "\1\356\20\11\33\0\11\11\1\0\1\11\1\0\2\11"+
    "\3\0\1\11\1\0\5\11\1\357\10\11\1\360\10\11"+
    "\33\0\11\11\1\0\1\11\1\0\2\11\3\0\1\11"+
    "\1\0\7\11\1\361\17\11\33\0\11\11\1\0\1\11"+
    "\1\0\2\11\3\0\1\11\1\0\3\11\1\362\23\11"+
    "\33\0\11\11\1\0\1\11\1\0\2\11\3\0\1\11"+
    "\1\0\25\11\1\363\1\11\33\0\11\11\1\0\1\11"+
    "\1\0\2\11\3\0\1\11\1\0\7\11\1\364\17\11"+
    "\33\0\11\11\1\0\1\11\1\0\2\11\3\0\1\11"+
    "\1\0\11\11\1\365\15\11\33\0\11\11\1\0\1\11"+
    "\1\0\2\11\3\0\1\11\1\0\10\11\1\366\16\11"+
    "\33\0\11\11\1\0\1\11\1\0\2\11\3\0\1\11"+
    "\1\0\24\11\1\367\2\11\33\0\11\11\1\0\1\11"+
    "\1\0\2\11\3\0\1\11\1\0\23\11\1\370\3\11"+
    "\33\0\11\11\1\0\1\11\1\0\2\11\3\0\1\11"+
    "\1\0\3\11\1\371\23\11\33\0\11\11\1\0\1\11"+
    "\1\0\2\11\3\0\1\11\1\0\11\11\1\372\15\11"+
    "\33\0\11\11\1\0\1\11\1\0\2\11\3\0\1\11"+
    "\1\0\13\11\1\373\13\11\33\0\11\11\1\0\1\11"+
    "\1\0\2\11\3\0\1\11\1\0\4\11\1\374\22\11"+
    "\33\0\11\11\1\0\1\11\1\0\2\11\3\0\1\11"+
    "\1\0\7\11\1\375\6\11\1\376\3\11\1\377\4\11"+
    "\33\0\11\11\1\0\1\11\1\0\2\11\3\0\1\11"+
    "\1\0\3\11\1\u0100\23\11\33\0\11\11\1\0\1\11"+
    "\1\0\2\11\3\0\1\11\1\0\3\11\1\u0101\23\11"+
    "\33\0\11\11\1\0\1\11\1\0\2\11\3\0\1\11"+
    "\1\0\1\11\1\u0102\25\11\33\0\11\11\1\0\1\11"+
    "\1\0\2\11\3\0\1\11\1\0\4\11\1\u0103\22\11"+
    "\33\0\11\11\1\0\1\11\1\0\2\11\3\0\1\11"+
    "\1\0\13\11\1\u0104\3\11\1\u0105\7\11\33\0\11\11"+
    "\1\0\1\11\1\0\2\11\3\0\1\11\1\0\17\11"+
    "\1\u0106\7\11\126\0\1\u0107\104\0\1\u0108\14\0\1\u0109"+
    "\2\0\1\u0109\1\0\1\u0109\1\0\1\u0109\2\0\1\u0109"+
    "\5\0\2\u0109\3\0\3\u0109\10\0\1\u0109\44\0\1\u010a"+
    "\2\0\1\u010a\1\0\1\u010a\1\0\1\u010a\2\0\1\u010a"+
    "\5\0\2\u010a\3\0\3\u010a\10\0\1\u010a\44\0\1\u010b"+
    "\2\0\1\u010b\1\0\1\u010b\1\0\1\u010b\2\0\1\u010b"+
    "\5\0\2\u010b\3\0\3\u010b\10\0\1\u010b\60\0\1\u010c"+
    "\70\0\1\u010d\2\0\1\u010d\1\0\1\u010d\1\0\1\u010d"+
    "\2\0\1\u010d\5\0\2\u010d\3\0\3\u010d\10\0\1\u010d"+
    "\60\0\1\u010e\104\0\1\u010f\104\0\1\u0110\104\0\1\u0111"+
    "\70\0\1\u0112\2\0\1\u0112\1\0\1\u0112\1\0\1\u0112"+
    "\2\0\1\u0112\5\0\2\u0112\3\0\3\u0112\10\0\1\u0112"+
    "\60\0\1\u0113\104\0\1\u0114\104\0\1\u0115\104\0\1\u0116"+
    "\104\0\1\u0117\104\0\1\u0118\70\0\1\u0119\2\0\1\u0119"+
    "\1\0\1\u0119\1\0\1\u0119\2\0\1\u0119\5\0\2\u0119"+
    "\3\0\3\u0119\10\0\1\u0119\63\0\1\270\62\0\11\11"+
    "\1\0\1\11\1\0\2\11\3\0\1\11\1\0\1\u011a"+
    "\26\11\33\0\11\11\1\0\1\11\1\0\2\11\3\0"+
    "\1\11\1\0\6\11\1\u011b\20\11\33\0\11\11\1\0"+
    "\1\11\1\0\2\11\3\0\1\11\1\0\3\11\1\u011c"+
    "\23\11\36\0\1\275\2\0\1\275\5\0\2\114\13\0"+
    "\1\114\1\0\1\114\7\0\1\114\44\0\1\275\2\0"+
    "\1\275\76\0\11\11\1\0\1\11\1\0\2\11\3\0"+
    "\1\11\1\0\13\11\1\u011d\13\11\33\0\11\11\1\0"+
    "\1\11\1\0\2\11\3\0\1\11\1\0\16\11\1\u011e"+
    "\10\11\33\0\11\11\1\0\1\11\1\0\2\11\3\0"+
    "\1\11\1\0\16\11\1\u011f\10\11\33\0\11\11\1\0"+
    "\1\11\1\0\2\11\3\0\1\11\1\0\1\u0120\26\11"+
    "\33\0\11\11\1\0\1\11\1\0\2\11\3\0\1\11"+
    "\1\0\15\11\1\u0121\11\11\33\0\11\11\1\0\1\11"+
    "\1\0\2\11\3\0\1\11\1\0\3\11\1\u0122\23\11"+
    "\33\0\11\11\1\0\1\11\1\0\2\11\3\0\1\11"+
    "\1\0\3\11\1\u0123\23\11\33\0\11\11\1\0\1\11"+
    "\1\0\2\11\3\0\1\11\1\0\7\11\1\u0124\17\11"+
    "\33\0\11\11\1\0\1\11\1\0\2\11\3\0\1\11"+
    "\1\0\7\11\1\u0125\17\11\33\0\11\11\1\0\1\11"+
    "\1\0\2\11\3\0\1\11\1\0\1\u0126\26\11\33\0"+
    "\11\11\1\0\1\11\1\0\2\11\3\0\1\11\1\0"+
    "\7\11\1\u0127\17\11\33\0\11\11\1\0\1\11\1\0"+
    "\2\11\3\0\1\11\1\0\11\11\1\u0128\15\11\33\0"+
    "\11\11\1\0\1\11\1\0\2\11\3\0\1\11\1\0"+
    "\3\11\1\u0129\23\11\33\0\11\11\1\0\1\11\1\0"+
    "\2\11\3\0\1\11\1\0\3\11\1\u012a\1\11\1\u012b"+
    "\21\11\33\0\11\11\1\0\1\11\1\0\2\11\3\0"+
    "\1\u012c\1\0\17\11\1\u012d\7\11\33\0\11\11\1\0"+
    "\1\11\1\0\2\11\3\0\1\11\1\0\11\11\1\u012e"+
    "\15\11\33\0\11\11\1\0\1\11\1\0\2\11\3\0"+
    "\1\11\1\0\4\11\1\u012f\22\11\33\0\11\11\1\0"+
    "\1\11\1\0\2\11\3\0\1\11\1\0\7\11\1\u0130"+
    "\17\11\33\0\11\11\1\0\1\11\1\0\2\11\3\0"+
    "\1\11\1\0\3\11\1\u0131\23\11\33\0\11\11\1\0"+
    "\1\11\1\0\2\11\3\0\1\11\1\0\7\11\1\u0132"+
    "\17\11\33\0\11\11\1\0\1\11\1\0\2\11\3\0"+
    "\1\11\1\0\7\11\1\u0133\17\11\33\0\11\11\1\0"+
    "\1\11\1\0\2\11\3\0\1\11\1\0\13\11\1\u0134"+
    "\13\11\33\0\11\11\1\0\1\11\1\0\2\11\3\0"+
    "\1\11\1\0\2\11\1\u0135\24\11\33\0\11\11\1\0"+
    "\1\11\1\0\2\11\3\0\1\11\1\0\6\11\1\u0136"+
    "\20\11\33\0\11\11\1\0\1\11\1\0\2\11\3\0"+
    "\1\u0137\1\0\27\11\33\0\11\11\1\0\1\11\1\0"+
    "\2\11\3\0\1\11\1\0\13\11\1\u0138\13\11\33\0"+
    "\11\11\1\0\1\11\1\0\2\11\3\0\1\11\1\0"+
    "\7\11\1\u0139\17\11\33\0\11\11\1\0\1\11\1\0"+
    "\2\11\3\0\1\11\1\0\5\11\1\u013a\21\11\33\0"+
    "\11\11\1\0\1\11\1\0\2\11\3\0\1\11\1\0"+
    "\2\11\1\u013b\24\11\33\0\11\11\1\0\1\11\1\0"+
    "\2\11\3\0\1\11\1\0\2\11\1\u013c\1\u013d\23\11"+
    "\33\0\11\11\1\0\1\11\1\0\2\11\3\0\1\11"+
    "\1\0\4\11\1\u013e\22\11\33\0\11\11\1\0\1\11"+
    "\1\0\2\11\3\0\1\11\1\0\5\11\1\u013f\21\11"+
    "\33\0\11\11\1\0\1\11\1\0\2\11\3\0\1\11"+
    "\1\0\17\11\1\u0140\7\11\33\0\11\11\1\0\1\11"+
    "\1\0\2\11\3\0\1\11\1\0\7\11\1\u0141\17\11"+
    "\33\0\11\11\1\0\1\11\1\0\2\11\3\0\1\11"+
    "\1\0\1\u0142\26\11\33\0\11\11\1\0\1\11\1\0"+
    "\2\11\3\0\1\11\1\0\1\11\1\u0143\25\11\33\0"+
    "\11\11\1\0\1\11\1\0\2\11\3\0\1\11\1\0"+
    "\16\11\1\u0144\10\11\33\0\11\11\1\0\1\11\1\0"+
    "\2\11\3\0\1\11\1\0\7\11\1\u0145\17\11\33\0"+
    "\11\11\1\0\1\11\1\0\2\11\3\0\1\11\1\0"+
    "\10\11\1\u0146\16\11\33\0\11\11\1\0\1\11\1\0"+
    "\2\11\3\0\1\11\1\0\7\11\1\u0147\17\11\33\0"+
    "\11\11\1\0\1\11\1\0\2\11\3\0\1\11\1\0"+
    "\11\11\1\u0148\15\11\33\0\11\11\1\0\1\11\1\0"+
    "\2\11\3\0\1\11\1\0\15\11\1\u0149\11\11\33\0"+
    "\11\11\1\0\1\11\1\0\2\11\3\0\1\u014a\1\0"+
    "\27\11\33\0\11\11\1\0\1\11\1\0\2\11\3\0"+
    "\1\11\1\0\14\11\1\u014b\12\11\33\0\11\11\1\0"+
    "\1\11\1\0\2\11\3\0\1\11\1\0\21\11\1\u014c"+
    "\5\11\33\0\11\11\1\0\1\11\1\0\2\11\3\0"+
    "\1\11\1\0\4\11\1\u014d\22\11\33\0\11\11\1\0"+
    "\1\11\1\0\2\11\3\0\1\11\1\0\7\11\1\u014e"+
    "\17\11\33\0\11\11\1\0\1\11\1\0\2\11\3\0"+
    "\1\11\1\0\4\11\1\u014f\22\11\33\0\11\11\1\0"+
    "\1\11\1\0\2\11\3\0\1\11\1\0\11\11\1\u0150"+
    "\15\11\33\0\11\11\1\0\1\11\1\0\2\11\3\0"+
    "\1\11\1\0\7\11\1\u0151\17\11\33\0\11\11\1\0"+
    "\1\11\1\0\2\11\3\0\1\11\1\0\11\11\1\u0152"+
    "\15\11\33\0\11\11\1\0\1\11\1\0\2\11\3\0"+
    "\1\11\1\0\7\11\1\u0153\17\11\33\0\11\11\1\0"+
    "\1\11\1\0\2\11\3\0\1\11\1\0\2\11\1\u0154"+
    "\24\11\33\0\11\11\1\0\1\11\1\0\2\11\3\0"+
    "\1\11\1\0\1\u0155\26\11\33\0\11\11\1\0\1\11"+
    "\1\0\2\11\3\0\1\11\1\0\7\11\1\u0156\17\11"+
    "\33\0\11\11\1\0\1\11\1\0\2\11\3\0\1\11"+
    "\1\0\11\11\1\u0157\15\11\33\0\11\11\1\0\1\11"+
    "\1\0\2\11\3\0\1\11\1\0\1\u0158\26\11\33\0"+
    "\11\11\1\0\1\11\1\0\2\11\3\0\1\11\1\0"+
    "\7\11\1\u0159\17\11\33\0\11\11\1\0\1\11\1\0"+
    "\2\11\3\0\1\11\1\0\13\11\1\u015a\13\11\33\0"+
    "\11\11\1\0\1\11\1\0\2\11\3\0\1\11\1\0"+
    "\11\11\1\u015b\15\11\33\0\11\11\1\0\1\11\1\0"+
    "\2\11\3\0\1\11\1\0\1\u015c\26\11\33\0\11\11"+
    "\1\0\1\11\1\0\2\11\3\0\1\11\1\0\3\11"+
    "\1\u015d\17\11\1\u015e\3\11\33\0\1\11\1\u015f\7\11"+
    "\1\0\1\11\1\0\2\11\3\0\1\11\1\0\27\11"+
    "\33\0\11\11\1\0\1\11\1\0\2\11\3\0\1\11"+
    "\1\0\11\11\1\u0160\15\11\36\0\1\u0161\2\0\1\u0161"+
    "\1\0\1\u0161\1\0\1\u0161\2\0\1\u0161\5\0\2\u0161"+
    "\3\0\3\u0161\10\0\1\u0161\44\0\1\u0162\2\0\1\u0162"+
    "\1\0\1\u0162\1\0\1\u0162\2\0\1\u0162\5\0\2\u0162"+
    "\3\0\3\u0162\10\0\1\u0162\44\0\1\u0163\2\0\1\u0163"+
    "\1\0\1\u0163\1\0\1\u0163\2\0\1\u0163\5\0\2\u0163"+
    "\3\0\3\u0163\10\0\1\u0163\44\0\1\u0164\2\0\1\u0164"+
    "\1\0\1\u0164\1\0\1\u0164\2\0\1\u0164\5\0\2\u0164"+
    "\3\0\3\u0164\10\0\1\u0164\44\0\1\u0165\2\0\1\u0165"+
    "\1\0\1\u0165\1\0\1\u0165\2\0\1\u0165\5\0\2\u0165"+
    "\3\0\3\u0165\10\0\1\u0165\44\0\1\u0166\2\0\1\u0166"+
    "\1\0\1\u0166\1\0\1\u0166\2\0\1\u0166\1\0\1\u0167"+
    "\3\0\2\u0166\3\0\3\u0166\10\0\1\u0166\41\0\11\11"+
    "\1\0\1\11\1\0\2\11\3\0\1\11\1\0\3\11"+
    "\1\u0168\23\11\33\0\11\11\1\0\1\11\1\0\2\11"+
    "\3\0\1\u0169\1\0\27\11\33\0\11\11\1\0\1\11"+
    "\1\0\2\11\3\0\1\11\1\0\4\11\1\u016a\22\11"+
    "\33\0\11\11\1\0\1\11\1\0\2\11\3\0\1\11"+
    "\1\0\21\11\1\u016b\5\11\33\0\11\11\1\0\1\11"+
    "\1\0\2\11\3\0\1\11\1\0\21\11\1\u016c\5\11"+
    "\33\0\11\11\1\0\1\11\1\0\2\11\3\0\1\11"+
    "\1\0\20\11\1\u016d\6\11\33\0\11\11\1\0\1\11"+
    "\1\0\2\11\3\0\1\11\1\0\7\11\1\u016e\17\11"+
    "\33\0\11\11\1\0\1\11\1\0\2\11\3\0\1\11"+
    "\1\0\4\11\1\u016f\22\11\33\0\11\11\1\0\1\11"+
    "\1\0\2\11\3\0\1\11\1\0\10\11\1\u0170\16\11"+
    "\33\0\11\11\1\0\1\11\1\0\2\11\3\0\1\11"+
    "\1\0\14\11\1\u0171\12\11\33\0\11\11\1\0\1\11"+
    "\1\0\2\11\3\0\1\11\1\0\7\11\1\u0172\17\11"+
    "\33\0\11\11\1\0\1\11\1\0\2\11\3\0\1\11"+
    "\1\0\17\11\1\u0173\7\11\33\0\11\11\1\0\1\11"+
    "\1\0\2\11\3\0\1\11\1\0\14\11\1\u0174\12\11"+
    "\33\0\11\11\1\0\1\11\1\0\2\11\3\0\1\11"+
    "\1\0\5\11\1\u0175\21\11\33\0\11\11\1\0\1\11"+
    "\1\0\2\11\3\0\1\11\1\0\16\11\1\u0176\10\11"+
    "\33\0\11\11\1\0\1\11\1\0\2\11\3\0\1\11"+
    "\1\0\7\11\1\u0177\17\11\33\0\11\11\1\0\1\11"+
    "\1\0\2\11\3\0\1\11\1\0\3\11\1\u0178\23\11"+
    "\33\0\11\11\1\0\1\11\1\0\2\11\3\0\1\11"+
    "\1\0\13\11\1\u0179\13\11\33\0\11\11\1\0\1\11"+
    "\1\0\2\11\3\0\1\11\1\0\5\11\1\u017a\21\11"+
    "\33\0\11\11\1\0\1\11\1\0\2\11\3\0\1\11"+
    "\1\0\13\11\1\u017b\13\11\33\0\11\11\1\0\1\11"+
    "\1\0\2\11\3\0\1\11\1\0\24\11\1\u017c\2\11"+
    "\33\0\11\11\1\0\1\11\1\0\2\11\3\0\1\11"+
    "\1\0\13\11\1\u017d\13\11\33\0\11\11\1\0\1\11"+
    "\1\0\2\11\3\0\1\11\1\0\4\11\1\u017e\22\11"+
    "\33\0\1\11\1\u017f\7\11\1\0\1\11\1\0\2\11"+
    "\3\0\1\11\1\0\27\11\33\0\11\11\1\0\1\11"+
    "\1\0\2\11\3\0\1\11\1\0\15\11\1\u0180\11\11"+
    "\33\0\11\11\1\0\1\11\1\0\2\11\3\0\1\11"+
    "\1\0\2\11\1\u0181\24\11\33\0\11\11\1\0\1\11"+
    "\1\0\2\11\3\0\1\11\1\0\3\11\1\u0182\23\11"+
    "\33\0\11\11\1\0\1\11\1\0\2\11\3\0\1\11"+
    "\1\0\17\11\1\u0183\7\11\33\0\11\11\1\0\1\11"+
    "\1\0\2\11\3\0\1\11\1\0\14\11\1\u0184\12\11"+
    "\33\0\11\11\1\0\1\11\1\0\2\11\3\0\1\11"+
    "\1\0\10\11\1\u0185\16\11\33\0\11\11\1\0\1\11"+
    "\1\0\2\11\3\0\1\11\1\0\21\11\1\u0186\5\11"+
    "\33\0\11\11\1\0\1\11\1\0\2\11\3\0\1\u0187"+
    "\1\0\27\11\33\0\11\11\1\0\1\11\1\0\2\11"+
    "\3\0\1\11\1\0\11\11\1\u0188\15\11\33\0\11\11"+
    "\1\0\1\11\1\0\2\11\3\0\1\11\1\0\3\11"+
    "\1\u0189\23\11\33\0\11\11\1\0\1\11\1\0\2\11"+
    "\3\0\1\11\1\0\4\11\1\u018a\22\11\33\0\11\11"+
    "\1\0\1\11\1\0\2\11\3\0\1\11\1\0\17\11"+
    "\1\u018b\7\11\33\0\11\11\1\0\1\11\1\0\2\11"+
    "\3\0\1\11\1\0\13\11\1\u018c\13\11\33\0\11\11"+
    "\1\0\1\11\1\0\2\11\3\0\1\11\1\0\11\11"+
    "\1\u018d\15\11\33\0\11\11\1\0\1\11\1\0\2\11"+
    "\3\0\1\11\1\0\4\11\1\u018e\22\11\33\0\11\11"+
    "\1\0\1\11\1\0\2\11\3\0\1\11\1\0\5\11"+
    "\1\u018f\21\11\33\0\11\11\1\0\1\11\1\0\2\11"+
    "\3\0\1\11\1\0\1\u0190\26\11\33\0\11\11\1\0"+
    "\1\11\1\0\2\11\3\0\1\11\1\0\2\11\1\u0191"+
    "\24\11\33\0\11\11\1\0\1\11\1\0\2\11\3\0"+
    "\1\11\1\0\17\11\1\u0192\7\11\33\0\11\11\1\0"+
    "\1\11\1\0\2\11\3\0\1\11\1\0\4\11\1\u0193"+
    "\22\11\33\0\11\11\1\0\1\11\1\0\2\11\3\0"+
    "\1\11\1\0\7\11\1\u0194\17\11\33\0\11\11\1\0"+
    "\1\11\1\0\2\11\3\0\1\11\1\0\3\11\1\u0195"+
    "\23\11\33\0\11\11\1\0\1\11\1\0\2\11\3\0"+
    "\1\11\1\0\1\u0196\26\11\33\0\11\11\1\0\1\11"+
    "\1\0\2\11\3\0\1\11\1\0\6\11\1\u0197\20\11"+
    "\33\0\11\11\1\0\1\11\1\0\2\11\3\0\1\11"+
    "\1\0\11\11\1\u0198\15\11\33\0\11\11\1\0\1\11"+
    "\1\0\2\11\3\0\1\11\1\0\6\11\1\u0199\20\11"+
    "\33\0\11\11\1\0\1\11\1\0\2\11\3\0\1\11"+
    "\1\0\17\11\1\u019a\7\11\33\0\11\11\1\0\1\11"+
    "\1\0\2\11\3\0\1\11\1\0\10\11\1\u019b\16\11"+
    "\33\0\11\11\1\0\1\11\1\0\2\11\3\0\1\11"+
    "\1\0\7\11\1\u019c\17\11\33\0\11\11\1\0\1\11"+
    "\1\0\2\11\3\0\1\11\1\0\7\11\1\u019d\17\11"+
    "\33\0\11\11\1\0\1\11\1\0\2\11\3\0\1\11"+
    "\1\0\1\u019e\26\11\33\0\11\11\1\0\1\11\1\0"+
    "\2\11\3\0\1\11\1\0\7\11\1\u019f\17\11\36\0"+
    "\1\u01a0\2\0\1\u01a0\1\0\1\u01a0\1\0\1\u01a0\2\0"+
    "\1\u01a0\5\0\2\u01a0\3\0\3\u01a0\10\0\1\u01a0\44\0"+
    "\1\u01a1\2\0\1\u01a1\1\0\1\u01a1\1\0\1\u01a1\2\0"+
    "\1\u01a1\5\0\2\u01a1\3\0\3\u01a1\10\0\1\u01a1\44\0"+
    "\1\u01a2\2\0\1\u01a2\1\0\1\u01a2\1\0\1\u01a2\2\0"+
    "\1\u01a2\5\0\2\u01a2\3\0\3\u01a2\10\0\1\u01a2\44\0"+
    "\1\u01a3\2\0\1\u01a3\1\0\1\u01a3\1\0\1\u01a3\2\0"+
    "\1\u01a3\5\0\2\u01a3\3\0\3\u01a3\10\0\1\u01a3\44\0"+
    "\1\u01a4\2\0\1\u01a4\1\0\1\u01a4\1\0\1\u01a4\2\0"+
    "\1\u01a4\5\0\2\u01a4\3\0\3\u01a4\10\0\1\u01a4\44\0"+
    "\1\u01a5\2\0\1\u01a5\1\0\1\u01a5\1\0\1\u01a5\2\0"+
    "\1\u01a5\1\0\1\u0167\3\0\2\u01a5\3\0\3\u01a5\10\0"+
    "\1\u01a5\41\0\11\11\1\0\1\11\1\0\2\11\3\0"+
    "\1\11\1\0\17\11\1\u01a6\7\11\33\0\11\11\1\0"+
    "\1\11\1\0\2\11\3\0\1\11\1\0\1\u01a7\26\11"+
    "\33\0\11\11\1\0\1\11\1\0\2\11\3\0\1\11"+
    "\1\0\3\11\1\u01a8\23\11\33\0\11\11\1\0\1\11"+
    "\1\0\2\11\3\0\1\11\1\0\7\11\1\u01a9\17\11"+
    "\33\0\11\11\1\0\1\11\1\0\2\11\3\0\1\11"+
    "\1\0\5\11\1\u01aa\21\11\33\0\11\11\1\0\1\11"+
    "\1\0\2\11\3\0\1\11\1\0\1\u01ab\26\11\33\0"+
    "\11\11\1\0\1\11\1\0\2\11\3\0\1\11\1\0"+
    "\1\11\1\u01ac\25\11\33\0\11\11\1\0\1\11\1\0"+
    "\2\11\3\0\1\11\1\0\5\11\1\u01ad\21\11\33\0"+
    "\11\11\1\0\1\11\1\0\2\11\3\0\1\11\1\0"+
    "\1\u01ae\26\11\33\0\11\11\1\0\1\11\1\0\2\11"+
    "\3\0\1\11\1\0\3\11\1\u01af\23\11\33\0\11\11"+
    "\1\0\1\11\1\0\2\11\3\0\1\11\1\0\21\11"+
    "\1\u01b0\5\11\33\0\11\11\1\0\1\11\1\0\2\11"+
    "\3\0\1\11\1\0\6\11\1\u01b1\20\11\33\0\11\11"+
    "\1\0\1\11\1\0\2\11\3\0\1\11\1\0\20\11"+
    "\1\u01b2\6\11\33\0\11\11\1\0\1\11\1\0\2\11"+
    "\3\0\1\11\1\0\15\11\1\u01b3\11\11\33\0\11\11"+
    "\1\0\1\11\1\0\2\11\3\0\1\11\1\0\20\11"+
    "\1\u01b4\6\11\33\0\11\11\1\0\1\11\1\0\2\11"+
    "\3\0\1\11\1\0\16\11\1\u01b5\10\11\33\0\11\11"+
    "\1\0\1\11\1\0\2\11\3\0\1\11\1\0\16\11"+
    "\1\u01b6\10\11\33\0\11\11\1\0\1\11\1\0\2\11"+
    "\3\0\1\11\1\0\7\11\1\u01b7\17\11\33\0\11\11"+
    "\1\0\1\11\1\0\2\11\3\0\1\11\1\0\16\11"+
    "\1\u01b8\10\11\33\0\11\11\1\0\1\11\1\0\2\11"+
    "\3\0\1\11\1\0\7\11\1\u01b9\17\11\33\0\11\11"+
    "\1\0\1\11\1\0\2\11\3\0\1\11\1\0\1\u01ba"+
    "\26\11\33\0\11\11\1\0\1\11\1\0\2\11\3\0"+
    "\1\11\1\0\1\u01bb\26\11\33\0\11\11\1\0\1\11"+
    "\1\0\2\11\3\0\1\11\1\0\11\11\1\u01bc\15\11"+
    "\33\0\11\11\1\0\1\11\1\0\2\11\3\0\1\11"+
    "\1\0\7\11\1\u01bd\17\11\33\0\11\11\1\0\1\11"+
    "\1\0\2\11\3\0\1\11\1\0\16\11\1\u01be\10\11"+
    "\33\0\11\11\1\0\1\11\1\0\2\11\3\0\1\11"+
    "\1\0\5\11\1\u01bf\21\11\33\0\11\11\1\0\1\11"+
    "\1\0\2\11\3\0\1\11\1\0\6\11\1\u01c0\20\11"+
    "\33\0\11\11\1\0\1\11\1\0\2\11\3\0\1\11"+
    "\1\0\7\11\1\u01c1\17\11\33\0\11\11\1\0\1\11"+
    "\1\0\2\11\3\0\1\11\1\0\17\11\1\u01c2\7\11"+
    "\33\0\11\11\1\0\1\11\1\0\2\11\3\0\1\11"+
    "\1\0\3\11\1\u01c3\23\11\33\0\11\11\1\0\1\11"+
    "\1\0\2\11\3\0\1\11\1\0\3\11\1\u01c4\23\11"+
    "\33\0\11\11\1\0\1\11\1\0\2\11\3\0\1\11"+
    "\1\0\23\11\1\u01c5\3\11\33\0\11\11\1\0\1\11"+
    "\1\0\2\11\3\0\1\11\1\0\5\11\1\u01c6\21\11"+
    "\33\0\11\11\1\0\1\11\1\0\2\11\3\0\1\11"+
    "\1\0\16\11\1\u01c7\1\11\1\u01c8\6\11\33\0\11\11"+
    "\1\0\1\11\1\0\2\11\3\0\1\11\1\0\5\11"+
    "\1\u01c9\21\11\33\0\11\11\1\0\1\11\1\0\2\11"+
    "\3\0\1\11\1\0\11\11\1\u01ca\15\11\33\0\11\11"+
    "\1\0\1\11\1\0\2\11\3\0\1\11\1\0\5\11"+
    "\1\u01cb\21\11\33\0\11\11\1\0\1\11\1\0\2\11"+
    "\3\0\1\11\1\0\2\11\1\u01cc\24\11\33\0\11\11"+
    "\1\0\1\11\1\0\2\11\3\0\1\11\1\0\5\11"+
    "\1\u01cd\21\11\33\0\11\11\1\0\1\11\1\0\2\11"+
    "\3\0\1\11\1\0\4\11\1\u01ce\22\11\33\0\11\11"+
    "\1\0\1\11\1\0\2\11\3\0\1\11\1\0\3\11"+
    "\1\u01cf\23\11\36\0\1\u01d0\2\0\1\u01d0\1\0\1\u01d0"+
    "\1\0\1\u01d0\2\0\1\u01d0\5\0\2\u01d0\3\0\3\u01d0"+
    "\10\0\1\u01d0\44\0\1\u01d1\2\0\1\u01d1\1\0\1\u01d1"+
    "\1\0\1\u01d1\2\0\1\u01d1\5\0\2\u01d1\3\0\3\u01d1"+
    "\10\0\1\u01d1\44\0\1\u01d2\2\0\1\u01d2\1\0\1\u01d2"+
    "\1\0\1\u01d2\2\0\1\u01d2\5\0\2\u01d2\3\0\3\u01d2"+
    "\10\0\1\u01d2\44\0\1\u01d3\2\0\1\u01d3\1\0\1\u01d3"+
    "\1\0\1\u01d3\2\0\1\u01d3\5\0\2\u01d3\3\0\3\u01d3"+
    "\10\0\1\u01d3\44\0\1\u01d4\2\0\1\u01d4\1\0\1\u01d4"+
    "\1\0\1\u01d4\2\0\1\u01d4\5\0\2\u01d4\3\0\3\u01d4"+
    "\10\0\1\u01d4\44\0\1\u01d5\2\0\1\u01d5\1\0\1\u01d5"+
    "\1\0\1\u01d5\2\0\1\u01d5\1\0\1\u0167\3\0\2\u01d5"+
    "\3\0\3\u01d5\10\0\1\u01d5\41\0\11\11\1\0\1\11"+
    "\1\0\2\11\3\0\1\11\1\0\11\11\1\u01d6\15\11"+
    "\33\0\11\11\1\0\1\11\1\0\2\11\3\0\1\11"+
    "\1\0\11\11\1\u01d7\15\11\33\0\11\11\1\0\1\11"+
    "\1\0\2\11\3\0\1\11\1\0\14\11\1\u01d8\12\11"+
    "\33\0\11\11\1\0\1\11\1\0\2\11\3\0\1\11"+
    "\1\0\5\11\1\u01d9\21\11\33\0\11\11\1\0\1\11"+
    "\1\0\2\11\3\0\1\11\1\0\11\11\1\u01da\15\11"+
    "\33\0\11\11\1\0\1\11\1\0\2\11\3\0\1\11"+
    "\1\0\11\11\1\u01db\15\11\33\0\11\11\1\0\1\11"+
    "\1\0\2\11\3\0\1\11\1\0\11\11\1\u01dc\15\11"+
    "\33\0\11\11\1\0\1\11\1\0\2\11\3\0\1\u01dd"+
    "\1\0\27\11\33\0\11\11\1\0\1\11\1\0\2\11"+
    "\3\0\1\11\1\0\6\11\1\u01de\20\11\33\0\11\11"+
    "\1\0\1\11\1\0\2\11\3\0\1\11\1\0\11\11"+
    "\1\u01df\15\11\33\0\11\11\1\0\1\11\1\0\2\11"+
    "\3\0\1\11\1\0\3\11\1\u01e0\23\11\33\0\11\11"+
    "\1\0\1\11\1\0\2\11\3\0\1\11\1\0\3\11"+
    "\1\u01e1\23\11\33\0\11\11\1\0\1\11\1\0\2\11"+
    "\3\0\1\11\1\0\17\11\1\u01e2\7\11\33\0\11\11"+
    "\1\0\1\11\1\0\2\11\3\0\1\11\1\0\6\11"+
    "\1\u01e3\20\11\33\0\11\11\1\0\1\11\1\0\2\11"+
    "\3\0\1\11\1\0\13\11\1\u01e4\13\11\33\0\11\11"+
    "\1\0\1\11\1\0\2\11\3\0\1\11\1\0\1\u01e5"+
    "\26\11\33\0\11\11\1\0\1\11\1\0\2\11\3\0"+
    "\1\11\1\0\17\11\1\u01e6\7\11\33\0\11\11\1\0"+
    "\1\11\1\0\2\11\3\0\1\11\1\0\1\u01e7\26\11"+
    "\33\0\11\11\1\0\1\11\1\0\2\11\3\0\1\11"+
    "\1\0\1\u01e8\26\11\33\0\11\11\1\0\1\11\1\0"+
    "\2\11\3\0\1\11\1\0\15\11\1\u01e9\11\11\33\0"+
    "\11\11\1\0\1\11\1\0\2\11\3\0\1\11\1\0"+
    "\12\11\1\u01ea\14\11\33\0\11\11\1\0\1\11\1\0"+
    "\2\11\3\0\1\11\1\0\3\11\1\u01eb\23\11\33\0"+
    "\11\11\1\0\1\11\1\0\2\11\3\0\1\11\1\0"+
    "\3\11\1\u01ec\23\11\33\0\11\11\1\0\1\11\1\0"+
    "\2\11\3\0\1\11\1\0\7\11\1\u01ed\17\11\52\0"+
    "\1\u01ee\104\0\1\u0167\65\0\11\11\1\0\1\11\1\0"+
    "\2\11\3\0\1\11\1\0\7\11\1\u01ef\17\11\33\0"+
    "\11\11\1\0\1\11\1\0\2\11\3\0\1\11\1\0"+
    "\7\11\1\u01f0\17\11\33\0\11\11\1\0\1\11\1\0"+
    "\2\11\3\0\1\11\1\0\3\11\1\u01f1\23\11\33\0"+
    "\11\11\1\0\1\11\1\0\2\11\3\0\1\11\1\0"+
    "\12\11\1\u01f2\14\11\33\0\11\11\1\0\1\11\1\0"+
    "\2\11\3\0\1\11\1\0\11\11\1\u01f3\15\11\33\0"+
    "\11\11\1\0\1\11\1\0\2\11\3\0\1\11\1\0"+
    "\12\11\1\u01f4\14\11\33\0\11\11\1\0\1\11\1\0"+
    "\2\11\3\0\1\11\1\0\7\11\1\u01f5\17\11\33\0"+
    "\11\11\1\0\1\11\1\0\2\11\3\0\1\11\1\0"+
    "\7\11\1\u01f6\17\11\33\0\11\11\1\0\1\11\1\0"+
    "\2\11\3\0\1\11\1\0\3\11\1\u01f7\23\11\33\0"+
    "\11\11\1\0\1\11\1\0\2\11\3\0\1\11\1\0"+
    "\7\11\1\u01f8\17\11\33\0\11\11\1\0\1\11\1\0"+
    "\2\11\3\0\1\11\1\0\4\11\1\u01f9\22\11\33\0"+
    "\11\11\1\0\1\11\1\0\2\11\3\0\1\11\1\0"+
    "\5\11\1\u01fa\21\11\33\0\11\11\1\0\1\11\1\0"+
    "\2\11\3\0\1\11\1\0\3\11\1\u01fb\23\11\33\0"+
    "\11\11\1\0\1\11\1\0\2\11\3\0\1\11\1\0"+
    "\11\11\1\u01fc\15\11\33\0\11\11\1\0\1\11\1\0"+
    "\2\11\3\0\1\11\1\0\5\11\1\u01fd\21\11\33\0"+
    "\11\11\1\0\1\11\1\0\2\11\3\0\1\11\1\0"+
    "\7\11\1\u01fe\17\11\33\0\11\11\1\0\1\11\1\0"+
    "\2\11\3\0\1\11\1\0\12\11\1\u01ff\14\11\33\0"+
    "\11\11\1\0\1\11\1\0\2\11\3\0\1\11\1\0"+
    "\6\11\1\u0200\20\11\33\0\11\11\1\0\1\11\1\0"+
    "\2\11\3\0\1\11\1\0\13\11\1\u0201\13\11\33\0"+
    "\11\11\1\0\1\11\1\0\2\11\3\0\1\11\1\0"+
    "\7\11\1\u0202\17\11\33\0\11\11\1\0\1\11\1\0"+
    "\2\11\3\0\1\11\1\0\7\11\1\u0203\17\11\33\0"+
    "\11\11\1\0\1\11\1\0\2\11\3\0\1\11\1\0"+
    "\6\11\1\u0204\20\11\33\0\11\11\1\0\1\11\1\0"+
    "\2\11\3\0\1\11\1\0\5\11\1\u0205\21\11\24\0";

  /** 
   * The transition table of the DFA
   */
  final private static int yytrans [] = yy_unpack();


  /* error codes */
  final private static int YY_UNKNOWN_ERROR = 0;
  final private static int YY_ILLEGAL_STATE = 1;
  final private static int YY_NO_MATCH = 2;
  final private static int YY_PUSHBACK_2BIG = 3;

  /* error messages for the codes above */
  final private static String YY_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Internal error: unknown state",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * YY_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private final static byte YY_ATTRIBUTE[] = {
     0,  0,  0,  0,  9,  1,  9,  1,  1,  1,  1,  1,  1,  1,  9,  9, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  9,  9,  9,  9,  9,  9,  9,  9,  9,  1,  1,  1,  1, 
     1,  1,  9,  9,  1,  1,  1,  1,  1,  9,  9,  1,  1,  1,  9,  1, 
     1,  1,  0,  9,  9,  1,  1,  1,  9,  0,  0,  9,  0,  1,  9,  9, 
     9,  1,  1,  1,  1,  9,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  9,  9,  9,  9,  9,  9,  9, 
     9,  9,  9,  9,  1,  9,  1,  9,  9,  1,  9,  9,  9,  9,  1,  9, 
     9,  9,  9,  9,  9,  1,  9,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  9,  9,  1,  1,  1,  1,  1,  1,  0,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  9,  9,  0,  0,  1,  9,  0,  9,  9,  9, 
     9,  0,  9,  9,  9,  9,  9,  9,  0,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     0,  0,  1,  0,  0,  0,  9,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  0, 
     0,  1,  0,  0,  0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  0, 
     9,  9,  0,  0,  0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  9,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1
  };

  /** the input device */
  private java.io.Reader yy_reader;

  /** the current state of the DFA */
  private int yy_state;

  /** the current lexical state */
  private int yy_lexical_state = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char yy_buffer[] = new char[YY_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int yy_markedPos;

  /** the textposition at the last state to be included in yytext */
  private int yy_pushbackPos;

  /** the current text position in the buffer */
  private int yy_currentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int yy_startRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int yy_endRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn; 

  /** 
   * yy_atBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean yy_atBOL = true;

  /** yy_atEOF == true <=> the scanner is at the EOF */
  private boolean yy_atEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean yy_eof_done;

  /* user code: */
	
	int nComments = 0;
	Stack stackBCC = new Stack();
  StringBuffer string = new StringBuffer();
  
  public int getComments() {
	  return nComments;
  }
  
  public int getFirstCommentClass() {
		return ((Integer)stackBCC.pop()).intValue();
  }
  
  private Symbol symbol(int type) {
	  return new Symbol(type, yyline + 1, yycolumn + 1);
  }

  private Symbol symbol(int type, Object value) {
    return new Symbol(type, yyline + 1, yycolumn + 1, value);
  }
  


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public CSharpLexer(java.io.Reader in) {
    this.yy_reader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public CSharpLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the split, compressed DFA transition table.
   *
   * @return the unpacked transition table
   */
  private static int [] yy_unpack() {
    int [] trans = new int[24978];
    int offset = 0;
    offset = yy_unpack(yy_packed0, offset, trans);
    return trans;
  }

  /** 
   * Unpacks the compressed DFA transition table.
   *
   * @param packed   the packed transition table
   * @return         the index of the last entry
   */
  private static int yy_unpack(String packed, int offset, int [] trans) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do trans[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] yy_unpack_cmap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1436) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   IOException  if any I/O-Error occurs
   */
  private boolean yy_refill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (yy_startRead > 0) {
      System.arraycopy(yy_buffer, yy_startRead, 
                       yy_buffer, 0, 
                       yy_endRead-yy_startRead);

      /* translate stored positions */
      yy_endRead-= yy_startRead;
      yy_currentPos-= yy_startRead;
      yy_markedPos-= yy_startRead;
      yy_pushbackPos-= yy_startRead;
      yy_startRead = 0;
    }

    /* is the buffer big enough? */
    if (yy_currentPos >= yy_buffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[yy_currentPos*2];
      System.arraycopy(yy_buffer, 0, newBuffer, 0, yy_buffer.length);
      yy_buffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = yy_reader.read(yy_buffer, yy_endRead, 
                                            yy_buffer.length-yy_endRead);

    if (numRead < 0) {
      return true;
    }
    else {
      yy_endRead+= numRead;  
      return false;
    }
  }


  /**
   * Closes the input stream.
   */
  final public void yyclose() throws java.io.IOException {
    yy_atEOF = true;            /* indicate end of file */
    yy_endRead = yy_startRead;  /* invalidate buffer    */

    if (yy_reader != null)
      yy_reader.close();
  }


  /**
   * Closes the current stream, and resets the
   * scanner to read from a new input stream.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>YY_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  final public void yyreset(java.io.Reader reader) throws java.io.IOException {
    yyclose();
    yy_reader = reader;
    yy_atBOL  = true;
    yy_atEOF  = false;
    yy_endRead = yy_startRead = 0;
    yy_currentPos = yy_markedPos = yy_pushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    yy_lexical_state = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  final public int yystate() {
    return yy_lexical_state;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  final public void yybegin(int newState) {
    yy_lexical_state = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  final public String yytext() {
    return new String( yy_buffer, yy_startRead, yy_markedPos-yy_startRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  final public char yycharat(int pos) {
    return yy_buffer[yy_startRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  final public int yylength() {
    return yy_markedPos-yy_startRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void yy_ScanError(int errorCode) {
    String message;
    try {
      message = YY_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = YY_ERROR_MSG[YY_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  private void yypushback(int number)  {
    if ( number > yylength() )
      yy_ScanError(YY_PUSHBACK_2BIG);

    yy_markedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void yy_do_eof() throws java.io.IOException {
    if (!yy_eof_done) {
      yy_eof_done = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int yy_input;
    int yy_action;

    // cached fields:
    int yy_currentPos_l;
    int yy_startRead_l;
    int yy_markedPos_l;
    int yy_endRead_l = yy_endRead;
    char [] yy_buffer_l = yy_buffer;
    char [] yycmap_l = yycmap;

    int [] yytrans_l = yytrans;
    int [] yy_rowMap_l = yy_rowMap;
    byte [] yy_attr_l = YY_ATTRIBUTE;

    while (true) {
      yy_markedPos_l = yy_markedPos;

      boolean yy_r = false;
      for (yy_currentPos_l = yy_startRead; yy_currentPos_l < yy_markedPos_l;
                                                             yy_currentPos_l++) {
        switch (yy_buffer_l[yy_currentPos_l]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          yy_r = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          yy_r = true;
          break;
        case '\n':
          if (yy_r)
            yy_r = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          yy_r = false;
          yycolumn++;
        }
      }

      if (yy_r) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean yy_peek;
        if (yy_markedPos_l < yy_endRead_l)
          yy_peek = yy_buffer_l[yy_markedPos_l] == '\n';
        else if (yy_atEOF)
          yy_peek = false;
        else {
          boolean eof = yy_refill();
          yy_markedPos_l = yy_markedPos;
          yy_buffer_l = yy_buffer;
          if (eof) 
            yy_peek = false;
          else 
            yy_peek = yy_buffer_l[yy_markedPos_l] == '\n';
        }
        if (yy_peek) yyline--;
      }
      yy_action = -1;

      yy_startRead_l = yy_currentPos_l = yy_currentPos = 
                       yy_startRead = yy_markedPos_l;

      yy_state = yy_lexical_state;


      yy_forAction: {
        while (true) {

          if (yy_currentPos_l < yy_endRead_l)
            yy_input = yy_buffer_l[yy_currentPos_l++];
          else if (yy_atEOF) {
            yy_input = YYEOF;
            break yy_forAction;
          }
          else {
            // store back cached positions
            yy_currentPos  = yy_currentPos_l;
            yy_markedPos   = yy_markedPos_l;
            boolean eof = yy_refill();
            // get translated positions and possibly new buffer
            yy_currentPos_l  = yy_currentPos;
            yy_markedPos_l   = yy_markedPos;
            yy_buffer_l      = yy_buffer;
            yy_endRead_l     = yy_endRead;
            if (eof) {
              yy_input = YYEOF;
              break yy_forAction;
            }
            else {
              yy_input = yy_buffer_l[yy_currentPos_l++];
            }
          }
          int yy_next = yytrans_l[ yy_rowMap_l[yy_state] + yycmap_l[yy_input] ];
          if (yy_next == -1) break yy_forAction;
          yy_state = yy_next;

          int yy_attributes = yy_attr_l[yy_state];
          if ( (yy_attributes & 1) == 1 ) {
            yy_action = yy_state; 
            yy_markedPos_l = yy_currentPos_l; 
            if ( (yy_attributes & 8) == 8 ) break yy_forAction;
          }

        }
      }

      // store back cached position
      yy_markedPos = yy_markedPos_l;

      switch (yy_action) {

        case 151: 
        case 153: 
        case 158: 
        case 165: 
          {  throw new RuntimeException("Illegal escape sequence \"" + yytext() + "\"");  }
        case 518: break;
        case 167: 
        case 168: 
        case 169: 
        case 170: 
        case 171: 
        case 172: 
        case 173: 
        case 174: 
        case 175: 
        case 176: 
        case 177: 
        case 178: 
        case 179: 
        case 180: 
          {  throw new RuntimeException("Illegal escape sequence \"" + yytext() + "\"");  }
        case 519: break;
        case 56: 
        case 57: 
          {  throw new RuntimeException("Unterminated string at end of line");  }
        case 520: break;
        case 149: 
          {  return symbol(T_GTEQ);  }
        case 521: break;
        case 147: 
          {  return symbol(T_LTEQ);  }
        case 522: break;
        case 146: 
          {  return symbol(T_EQEQ);  }
        case 523: break;
        case 145: 
          {  return symbol(T_NOTEQ);  }
        case 524: break;
        case 144: 
          {  return symbol(T_XOREQ);  }
        case 525: break;
        case 143: 
          {  return symbol(T_OREQ);  }
        case 526: break;
        case 142: 
          {  return symbol(T_OROR);  }
        case 527: break;
        case 141: 
          {  return symbol(T_ANDEQ);  }
        case 528: break;
        case 139: 
          {  return symbol(T_MODEQ);  }
        case 529: break;
        case 80: 
          {  return symbol(T_ARROW);  }
        case 530: break;
        case 68: 
          {  return symbol(T_DIVEQ);  }
        case 531: break;
        case 65: 
        case 183: 
          {  /* ignore */  }
        case 532: break;
        case 64: 
          {  /* ignore */  }
        case 533: break;
        case 51: 
          {  return symbol(T_COMP);  }
        case 534: break;
        case 44: 
          {  return symbol(T_PLUS);  }
        case 535: break;
        case 42: 
          {  return symbol(T_COLON);  }
        case 536: break;
        case 41: 
          {  return symbol(T_COMMA);  }
        case 537: break;
        case 17: 
          {  return symbol(T_MULT);  }
        case 538: break;
        case 13: 
          {  return symbol(T_MINUS);  }
        case 539: break;
        case 5: 
        case 6: 
        case 9: 
          {  /* ignore */  }
        case 540: break;
        case 282: 
          {  return symbol(T_VOID);  }
        case 541: break;
        case 289: 
          {  return symbol(T_UINT);  }
        case 542: break;
        case 292: 
          {  return symbol(T_BASE);  }
        case 543: break;
        case 294: 
          {  return symbol(T_BYTE);  }
        case 544: break;
        case 295: 
          {  return symbol(T_BOOL);  }
        case 545: break;
        case 305: 
          {  return symbol(T_TRUE);  }
        case 546: break;
        case 306: 
          {  return symbol(T_TYPE);  }
        case 547: break;
        case 308: 
          {  return symbol(T_THIS);  }
        case 548: break;
        case 312: 
          {  return symbol(T_CASE);  }
        case 549: break;
        case 317: 
          {  return symbol(T_CHAR);  }
        case 550: break;
        case 324: 
          {  return symbol(T_ELSE);  }
        case 551: break;
        case 325: 
          {  return symbol(T_ENUM);  }
        case 552: break;
        case 330: 
          {  return symbol(T_LOCK);  }
        case 553: break;
        case 331: 
          {  return symbol(T_LONG);  }
        case 554: break;
        case 335: 
          {  return symbol(T_NULL);  }
        case 555: break;
        case 345: 
          {  return symbol(T_GOTO);  }
        case 556: break;
        case 362: 
          {  return symbol(T_USING);  }
        case 557: break;
        case 363: 
          {  return symbol(T_ULONG);  }
        case 558: break;
        case 368: 
          {  return symbol(T_BREAK);  }
        case 559: break;
        case 369: 
          {  return symbol(T_SBYTE);  }
        case 560: break;
        case 375: 
          {  return symbol(T_SHORT);  }
        case 561: break;
        case 379: 
          {  return symbol(T_THROW);  }
        case 562: break;
        case 383: 
          {  return symbol(T_CATCH);  }
        case 563: break;
        case 385: 
          {  return symbol(T_CONST);  }
        case 564: break;
        case 392: 
          {  return symbol(T_EVENT);  }
        case 565: break;
        case 403: 
          {  return symbol(T_FALSE);  }
        case 566: break;
        case 404: 
          {  return symbol(T_FLOAT);  }
        case 567: break;
        case 406: 
          {  return symbol(T_FIELD);  }
        case 568: break;
        case 408: 
          {  return symbol(T_FIXED);  }
        case 569: break;
        case 410: 
          {  return symbol(T_PARAM);  }
        case 570: break;
        case 414: 
          {  return symbol(T_WHILE);  }
        case 571: break;
        case 164: 
          {  string.append( '\f' );  }
        case 572: break;
        case 163: 
          {  string.append( '\n' );  }
        case 573: break;
        case 162: 
          {  string.append( '\r' );  }
        case 574: break;
        case 161: 
          {  string.append( '\t' );  }
        case 575: break;
        case 160: 
          {  string.append( '\b' );  }
        case 576: break;
        case 157: 
          {  string.append( '\\' );  }
        case 577: break;
        case 156: 
          {  string.append( '\'' );  }
        case 578: break;
        case 155: 
          {  string.append( '\"' );  }
        case 579: break;
        case 154: 
          {  string.append( '\0' );  }
        case 580: break;
        case 181: 
          {  nComments++;  }
        case 581: break;
        case 184: 
          {  nComments++;  }
        case 582: break;
        case 492: 
          {  return symbol(T_PRIVATE);  }
        case 583: break;
        case 489: 
          {  return symbol(T_FINALLY);  }
        case 584: break;
        case 488: 
          {  return symbol(T_FOREACH);  }
        case 585: break;
        case 480: 
          {  return symbol(T_DEFAULT);  }
        case 586: break;
        case 478: 
          {  return symbol(T_DECIMAL);  }
        case 587: break;
        case 477: 
          {  return symbol(T_CHECKED);  }
        case 588: break;
        case 470: 
          {  return symbol(T_VIRTUAL);  }
        case 589: break;
        case 459: 
          {  return symbol(T_PARAMS);  }
        case 590: break;
        case 458: 
          {  return symbol(T_PUBLIC);  }
        case 591: break;
        case 150: 
          {  return symbol(T_RSHIFT);  }
        case 592: break;
        case 148: 
          {  return symbol(T_LSHIFT);  }
        case 593: break;
        case 140: 
          {  return symbol(T_ANDAND);  }
        case 594: break;
        case 138: 
          {  return symbol(T_PLUSEQ);  }
        case 595: break;
        case 85: 
          {  return symbol(T_MULTEQ);  }
        case 596: break;
        case 79: 
          {  return symbol(T_MINUSEQ);  }
        case 597: break;
        case 40: 
          {  return symbol(T_RPAREN);  }
        case 598: break;
        case 39: 
          {  return symbol(T_LPAREN);  }
        case 599: break;
        case 38: 
          {  return symbol(T_RBRACK);  }
        case 600: break;
        case 37: 
          {  return symbol(T_LBRACK);  }
        case 601: break;
        case 36: 
          {  return symbol(T_RBRACE);  }
        case 602: break;
        case 35: 
          {  return symbol(T_LBRACE);  }
        case 603: break;
        case 423: 
          {  return symbol(T_USHORT);  }
        case 604: break;
        case 424: 
          {  return symbol(T_UNSAFE);  }
        case 605: break;
        case 428: 
          {  return symbol(T_STATIC);  }
        case 606: break;
        case 430: 
          {  return symbol(T_STRUCT);  }
        case 607: break;
        case 431: 
          {  return symbol(T_STRING);  }
        case 608: break;
        case 432: 
          {  return symbol(T_SEALED);  }
        case 609: break;
        case 433: 
          {  return symbol(T_SIZEOF);  }
        case 610: break;
        case 434: 
          {  return symbol(T_SWITCH);  }
        case 611: break;
        case 435: 
          {  return symbol(T_TYPEOF);  }
        case 612: break;
        case 437: 
          {  return symbol(T_RETURN);  }
        case 613: break;
        case 438: 
          {  return symbol(T_REMOVE);  }
        case 614: break;
        case 444: 
          {  return symbol(T_DOUBLE);  }
        case 615: break;
        case 445: 
          {  return symbol(T_EXTERN);  }
        case 616: break;
        case 447: 
          {  return symbol(T_METHOD);  }
        case 617: break;
        case 448: 
          {  return symbol(T_MODULE);  }
        case 618: break;
        case 450: 
          {  return symbol(T_OBJECT);  }
        case 619: break;
        case 61: 
        case 62: 
          {  throw new RuntimeException("Unterminated character literal at end of line");  }
        case 620: break;
        case 384: 
          {  stackBCC.push(new Integer(nComments)); return symbol(T_CLASS);  }
        case 621: break;
        case 126: 
          {  return symbol(T_IF);  }
        case 622: break;
        case 125: 
          {  return symbol(T_IN);  }
        case 623: break;
        case 123: 
          {  return symbol(T_IS);  }
        case 624: break;
        case 108: 
          {  return symbol(T_DO);  }
        case 625: break;
        case 87: 
          {  return symbol(T_AS);  }
        case 626: break;
        case 67: 
          {  nComments++; yybegin(COMMENT);  }
        case 627: break;
        case 54: 
          {  return symbol(T_GT);  }
        case 628: break;
        case 53: 
          {  return symbol(T_LT);  }
        case 629: break;
        case 52: 
          {  return symbol(T_EQ);  }
        case 630: break;
        case 49: 
          {  return symbol(T_NOT);  }
        case 631: break;
        case 48: 
          {  return symbol(T_XOR);  }
        case 632: break;
        case 47: 
          {  return symbol(T_OR);  }
        case 633: break;
        case 46: 
          {  return symbol(T_AND);  }
        case 634: break;
        case 45: 
          {  return symbol(T_MOD);  }
        case 635: break;
        case 12: 
          {  return symbol(T_DOT);  }
        case 636: break;
        case 7: 
          {  return symbol(T_DIV);  }
        case 637: break;
        case 199: 
          {  return symbol(T_ADD);  }
        case 638: break;
        case 208: 
          {  return symbol(T_SET);  }
        case 639: break;
        case 213: 
          {  return symbol(T_TRY);  }
        case 640: break;
        case 220: 
          {  return symbol(T_REF);  }
        case 641: break;
        case 241: 
          {  return symbol(T_OUT);  }
        case 642: break;
        case 246: 
          {  return symbol(T_NEW);  }
        case 643: break;
        case 248: 
          {  return symbol(T_INT);  }
        case 644: break;
        case 251: 
          {  return symbol(T_FOR);  }
        case 645: break;
        case 255: 
          {  return symbol(T_GET);  }
        case 646: break;
        case 166: 
          {  yybegin(YYINITIAL); return symbol(T_CHARACTER_LITERAL, new Character(yytext().charAt(0)));  }
        case 647: break;
        case 58: 
          {  yybegin(YYINITIAL); return symbol(T_STRING_LITERAL, string.toString());  }
        case 648: break;
        case 182: 
          {  yybegin(YYINITIAL);  }
        case 649: break;
        case 516: 
          {  return symbol(T_STACKALLOC);  }
        case 650: break;
        case 78: 
          {  return symbol(T_MINUSMINUS);  }
        case 651: break;
        case 10: 
        case 11: 
        case 71: 
        case 72: 
          { 	int pos = yylength();
																		if (Character.isLetter(yytext().charAt(pos - 1)))	{	
																		  pos--;
  																	  if (Character.isLetter(yytext().charAt(pos - 1)))
  																		  pos --;
  																	}
  																	return symbol(T_INTEGER_LITERAL, new Integer(yytext().substring(0, pos)));  }
        case 652: break;
        case 8: 
        case 16: 
        case 18: 
        case 19: 
        case 20: 
        case 21: 
        case 22: 
        case 23: 
        case 24: 
        case 25: 
        case 26: 
        case 27: 
        case 28: 
        case 29: 
        case 30: 
        case 31: 
        case 32: 
        case 33: 
        case 34: 
        case 69: 
        case 70: 
        case 81: 
        case 82: 
        case 83: 
        case 84: 
        case 86: 
        case 88: 
        case 89: 
        case 90: 
        case 91: 
        case 92: 
        case 93: 
        case 94: 
        case 95: 
        case 96: 
        case 97: 
        case 98: 
        case 99: 
        case 100: 
        case 101: 
        case 102: 
        case 103: 
        case 104: 
        case 105: 
        case 106: 
        case 107: 
        case 109: 
        case 110: 
        case 111: 
        case 112: 
        case 113: 
        case 114: 
        case 115: 
        case 116: 
        case 117: 
        case 118: 
        case 119: 
        case 120: 
        case 121: 
        case 122: 
        case 124: 
        case 127: 
        case 128: 
        case 129: 
        case 130: 
        case 131: 
        case 132: 
        case 133: 
        case 134: 
        case 135: 
        case 136: 
        case 185: 
        case 186: 
        case 187: 
        case 191: 
        case 192: 
        case 193: 
        case 194: 
        case 195: 
        case 196: 
        case 197: 
        case 198: 
        case 200: 
        case 201: 
        case 202: 
        case 203: 
        case 204: 
        case 205: 
        case 206: 
        case 207: 
        case 209: 
        case 210: 
        case 211: 
        case 212: 
        case 214: 
        case 215: 
        case 216: 
        case 217: 
        case 218: 
        case 219: 
        case 221: 
        case 222: 
        case 223: 
        case 224: 
        case 225: 
        case 226: 
        case 227: 
        case 228: 
        case 229: 
        case 230: 
        case 231: 
        case 232: 
        case 233: 
        case 234: 
        case 235: 
        case 236: 
        case 237: 
        case 238: 
        case 239: 
        case 240: 
        case 242: 
        case 243: 
        case 244: 
        case 245: 
        case 247: 
        case 249: 
        case 250: 
        case 252: 
        case 253: 
        case 254: 
        case 256: 
        case 257: 
        case 258: 
        case 259: 
        case 260: 
        case 261: 
        case 281: 
        case 283: 
        case 284: 
        case 285: 
        case 286: 
        case 287: 
        case 288: 
        case 290: 
        case 291: 
        case 293: 
        case 296: 
        case 297: 
        case 298: 
        case 299: 
        case 300: 
        case 301: 
        case 302: 
        case 303: 
        case 304: 
        case 307: 
        case 309: 
        case 310: 
        case 311: 
        case 313: 
        case 314: 
        case 315: 
        case 316: 
        case 318: 
        case 319: 
        case 320: 
        case 321: 
        case 322: 
        case 323: 
        case 326: 
        case 327: 
        case 328: 
        case 329: 
        case 332: 
        case 333: 
        case 334: 
        case 336: 
        case 337: 
        case 338: 
        case 339: 
        case 340: 
        case 341: 
        case 342: 
        case 343: 
        case 344: 
        case 346: 
        case 347: 
        case 348: 
        case 349: 
        case 350: 
        case 351: 
        case 359: 
        case 360: 
        case 361: 
        case 364: 
        case 365: 
        case 366: 
        case 367: 
        case 370: 
        case 371: 
        case 372: 
        case 373: 
        case 374: 
        case 376: 
        case 377: 
        case 378: 
        case 380: 
        case 381: 
        case 382: 
        case 386: 
        case 387: 
        case 388: 
        case 389: 
        case 390: 
        case 391: 
        case 393: 
        case 394: 
        case 395: 
        case 396: 
        case 397: 
        case 398: 
        case 399: 
        case 400: 
        case 401: 
        case 402: 
        case 405: 
        case 407: 
        case 409: 
        case 411: 
        case 412: 
        case 413: 
        case 421: 
        case 422: 
        case 425: 
        case 426: 
        case 427: 
        case 429: 
        case 436: 
        case 439: 
        case 440: 
        case 441: 
        case 442: 
        case 443: 
        case 446: 
        case 449: 
        case 451: 
        case 452: 
        case 453: 
        case 454: 
        case 455: 
        case 456: 
        case 457: 
        case 460: 
        case 461: 
        case 462: 
        case 469: 
        case 471: 
        case 472: 
        case 473: 
        case 474: 
        case 475: 
        case 476: 
        case 479: 
        case 481: 
        case 482: 
        case 483: 
        case 484: 
        case 485: 
        case 486: 
        case 487: 
        case 490: 
        case 491: 
        case 495: 
        case 498: 
        case 505: 
        case 508: 
        case 509: 
        case 512: 
          {  return symbol(T_IDENTIFIER, yytext());  }
        case 653: break;
        case 190: 
          {  return symbol(T_INTEGER_LITERAL, new Integer(Integer.parseInt(yytext().substring(2),16)));  }
        case 654: break;
        case 15: 
          {  yybegin(STATE_CHAR);  }
        case 655: break;
        case 267: 
          {  yybegin(YYINITIAL); return symbol(T_CHARACTER_LITERAL, new Character('\u000b'));  }
        case 656: break;
        case 269: 
          {  yybegin(YYINITIAL); return symbol(T_CHARACTER_LITERAL, new Character('\0'));  }
        case 657: break;
        case 270: 
          {  yybegin(YYINITIAL); return symbol(T_CHARACTER_LITERAL, new Character('\"'));  }
        case 658: break;
        case 271: 
          {  yybegin(YYINITIAL); return symbol(T_CHARACTER_LITERAL, new Character('\''));  }
        case 659: break;
        case 272: 
          {  yybegin(YYINITIAL); return symbol(T_CHARACTER_LITERAL, new Character('\\'));  }
        case 660: break;
        case 274: 
          {  yybegin(YYINITIAL); return symbol(T_CHARACTER_LITERAL, new Character('\u0007'));  }
        case 661: break;
        case 275: 
          {  yybegin(YYINITIAL); return symbol(T_CHARACTER_LITERAL, new Character('\b'));  }
        case 662: break;
        case 276: 
          {  yybegin(YYINITIAL); return symbol(T_CHARACTER_LITERAL, new Character('\t'));  }
        case 663: break;
        case 277: 
          {  yybegin(YYINITIAL); return symbol(T_CHARACTER_LITERAL, new Character('\r'));  }
        case 664: break;
        case 278: 
          {  yybegin(YYINITIAL); return symbol(T_CHARACTER_LITERAL, new Character('\n'));  }
        case 665: break;
        case 279: 
          {  yybegin(YYINITIAL); return symbol(T_CHARACTER_LITERAL, new Character('\f'));  }
        case 666: break;
        case 14: 
          {  yybegin(STATE_STRING); string.setLength(0);  }
        case 667: break;
        case 266: 
        case 354: 
        case 417: 
        case 465: 
          {  char val = (char) Short.parseShort(yytext().substring(2),16);
                        				   	    string.append( val );  }
        case 668: break;
        case 464: 
          {  char val = (char) Short.parseShort(yytext().substring(2), 16); 
  										                  string.append( val );  }
        case 669: break;
        case 515: 
          {  return symbol(T_PROTECTED);  }
        case 670: break;
        case 514: 
          {  return symbol(T_INTERFACE);  }
        case 671: break;
        case 513: 
          {  return symbol(T_NAMESPACE);  }
        case 672: break;
        case 511: 
          {  return symbol(T_UNCHECKED);  }
        case 673: break;
        case 510: 
          {  return symbol(T_PROPERTY);  }
        case 674: break;
        case 507: 
          {  return symbol(T_INTERNAL);  }
        case 675: break;
        case 506: 
          {  return symbol(T_IMPLICIT);  }
        case 676: break;
        case 504: 
          {  return symbol(T_OPERATOR);  }
        case 677: break;
        case 503: 
          {  return symbol(T_OVERRIDE);  }
        case 678: break;
        case 502: 
          {  return symbol(T_EXPLICIT);  }
        case 679: break;
        case 501: 
          {  return symbol(T_DELEGATE);  }
        case 680: break;
        case 500: 
          {  return symbol(T_CONTINUE);  }
        case 681: break;
        case 499: 
          {  return symbol(T_READONLY);  }
        case 682: break;
        case 497: 
          {  return symbol(T_ASSEMBLY);  }
        case 683: break;
        case 496: 
          {  return symbol(T_ABSTRACT);  }
        case 684: break;
        case 494: 
          {  return symbol(T_VOLATILE);  }
        case 685: break;
        case 159: 
          {  string.append( '\u0007' );  }
        case 686: break;
        case 152: 
          {  string.append( '\u000b' );  }
        case 687: break;
        case 137: 
          {  return symbol(T_PLUSPLUS);  }
        case 688: break;
        case 55: 
          {  string.append( yytext() );  }
        case 689: break;
        case 50: 
          {  return symbol(T_QUESTION);  }
        case 690: break;
        case 43: 
          {  return symbol(T_SEMICOLON);  }
        case 691: break;
        case 262: 
          {  return symbol(T_LSHIFTEQ);  }
        case 692: break;
        case 263: 
          {  return symbol(T_RSHIFTEQ);  }
        case 693: break;
        case 493: 
          {  yybegin(YYINITIAL); 
  												               char val = (char) Short.parseShort(yytext().substring(2, yylength() - 1), 16);
  												               return symbol(T_CHARACTER_LITERAL, new Character(val));  }
        case 694: break;
        case 75: 
        case 77: 
        case 188: 
          {  int pos = yylength();
									                  if (Character.isLetter(yytext().charAt(pos - 1)))
										                  pos--;
  									                return symbol(T_FLOAT_LITERAL, new Float(yytext().substring(0, pos)));  }
        case 695: break;
        case 4: 
        case 59: 
        case 60: 
        case 63: 
          {  throw new RuntimeException("Illegal character \"" + yytext() +
                                                              "\" at line " + yyline + ", column " + yycolumn);  }
        case 696: break;
        case 358: 
          {  yybegin(YYINITIAL); 
			                                   char val = (char) Short.parseShort(yytext().substring(2, yylength() - 1),16);
			                                   return symbol(T_CHARACTER_LITERAL, new Character(val));  }
        case 697: break;
        default: 
          if (yy_input == YYEOF && yy_startRead == yy_currentPos) {
            yy_atEOF = true;
            yy_do_eof();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            yy_ScanError(YY_NO_MATCH);
          }
      }
    }
  }


}
